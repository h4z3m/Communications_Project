%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Communications-2 Project
%% Team:
%% - Ahmed Mohamed Saad - 1190184
%% - Hazem Montasser - 2200003
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
clear
close all

import ModulationTypes.*;
import Modulator.*;
import DigitalMapper.*;
import demapBits.*;
import Channel.*;

%bits = [1 0 1 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 0];
%bits = randi([0 1], 1, 48 * 1000);

bits = randi([0 1], 1, 12000);
SNR = 1:1:10;
E = 5;

%% Add modulators
mapper = DigitalMapper();
mapper.addModulator(ModulationTypes.BPSK);
mapper.addModulator(ModulationTypes.QPSK);
mapper.addModulator(ModulationTypes.PSK8);
mapper.addModulator(ModulationTypes.QAM16);

%% Modulate all signals
modulated_signals = mapper.modulate(E, bits);
bpsk_mod = modulated_signals(char(ModulationTypes.BPSK));
qpsk_mod = modulated_signals(char(ModulationTypes.QPSK));
psk8_mod = modulated_signals(char(ModulationTypes.PSK8));
qam16_mod = modulated_signals(char(ModulationTypes.QAM16));

%% Add noise
theoretical_bpsk_ber = [];
theoretical_qpsk_ber = [];
theoretical_psk8_ber = [];
theoretical_qam16_ber = [];

simulated_bpsk_ber = [];
simulated_qpsk_ber = [];
simulated_psk8_ber = [];
simulated_qam16_ber = [];

for i = 1:length(SNR)
    channel = Channel(SNR(i));
    [temp_noisy_bpsk, temp_bpsk_ber] = channel.addNoise(bpsk_mod, E, ModulationTypes.BPSK);
    [temp_noisy_qpsk, temp_qpsk_ber] = channel.addNoise(qpsk_mod, E, ModulationTypes.QPSK);
    [temp_noisy_psk8, temp_psk8_ber] = channel.addNoise(psk8_mod, E, ModulationTypes.PSK8);
    [temp_noisy_qam16, temp_qam16_ber] = channel.addNoise(qam16_mod, E, ModulationTypes.QAM16);

    %% Demodulate
    psk8_demod = demapBits(temp_noisy_psk8, E, ModulationTypes.PSK8);
    qam16_demod = demapBits(temp_noisy_qam16, E, ModulationTypes.QAM16);
    bpsk_demod = demapBits(temp_noisy_bpsk, E, ModulationTypes.BPSK);
    qpsk_demod = demapBits(temp_noisy_qpsk, E, ModulationTypes.QPSK);

    %% Calculate theoritical bit loss
    theoretical_bpsk_ber(end + 1) = temp_bpsk_ber;
    theoretical_qpsk_ber(end + 1) = temp_qpsk_ber;
    theoretical_psk8_ber(end + 1) = temp_psk8_ber;
    theoretical_qam16_ber(end + 1) = temp_qam16_ber;

    %% Calculate simulated bit loss
    simulated_bpsk_ber(end + 1) = biterr(bits, bpsk_demod) / length(bits);
    simulated_qpsk_ber(end + 1) = biterr(bits, qpsk_demod) / length(bits);
    simulated_psk8_ber(end + 1) = biterr(bits, psk8_demod) / length(bits);
    simulated_qam16_ber(end + 1) = biterr(bits, qam16_demod) / length(bits);

    %% Print results
    fprintf("--------------------------------------------------------\n");
    fprintf("SNR = %d\n", SNR(i));

    fprintf("Theoretical BPSK BER = %f, simulated BPSK BER = %f\n", theoretical_bpsk_ber(end), ...
        simulated_bpsk_ber(end))
    fprintf("Theoretical QPSK BER = %f, simulated QPSK BER = %f\n", theoretical_qpsk_ber(end), ...
        simulated_qpsk_ber(end))
    fprintf("Theoretical PSK8 BER = %f, simulated PSK8 BER = %f\n", theoretical_psk8_ber(end), ...
        simulated_psk8_ber(end))
    fprintf("Theoretical QAM16 BER = %f, simulated QAM16 BER = %f\n", theoretical_qam16_ber(end), ...
        simulated_qam16_ber(end))
bits
    fprintf("Actual number of errors:\n")
    fprintf("BPSK: %d bits,\testimated: %.5f bits\n", biterr(bits, bpsk_demod), theoretical_bpsk_ber(end) * length(bits))
    fprintf("QPSK: %d bits,\testimated: %.5f bits\n", biterr(bits, qpsk_demod), theoretical_qpsk_ber(end) * length(bits))
    fprintf("PSK8: %d bits,\testimated: %.5f bits\n", biterr(bits, psk8_demod), theoretical_psk8_ber(end) * length(bits))
    fprintf("QAM16: %d bits,\testimated: %.5f bits\n", biterr(bits, qam16_demod), theoretical_qam16_ber(end) * length(bits))
    fprintf("--------------------------------------------------------\n");

end

semilogy(SNR, theoretical_bpsk_ber, 'b.-', SNR, simulated_bpsk_ber, 'y.-');
hold on
semilogy(SNR, theoretical_qpsk_ber, 'r.-', SNR, simulated_qpsk_ber, 'co-');
semilogy(SNR, theoretical_psk8_ber, 'g.-', SNR, simulated_psk8_ber, 'kx-');
semilogy(SNR, theoretical_qam16_ber, 'y.-', SNR, simulated_qam16_ber, 'bs-');
legend('theory BPSK', 'simulated BPSK', 'theory QPSK', 'simulated QPSK', 'theory PSK8', 'simulated PSK8', 'theory QAM16', 'simulated QAM16');
grid on
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK, QPSK, PSK8 and QAM16 modulation');
